// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  providerEr = "prisma-erd-generator"
  output = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique @db.VarChar(255)
  password   String       @db.VarChar(255)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Session    Session[]
  Enrollment Enrollment[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  cpf       String    @db.VarChar(255)
  birthday  DateTime
  phone     String    @db.VarChar(255)
  userId    Int       @unique
  User      User      @relation(fields: [userId], references: [id])
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Imovel {
  id            Int             @id @default(autoincrement())
  addressImovel AddressImovel[]
  area          Int
  rooms         Int
  bathroom      Int
  garage        Int
  yard          Boolean
  ilumination   amountStatus
  water         amountStatus
  pipedGas      Boolean
  furniture     mobiliaStatus
  pet           Boolean
  condominium   Int
  rent          Int
  iptu          Int
  availability  Boolean
  photosImmobile  PhotosImmobile[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}
enum mobiliaStatus {
  FURNISHED
  FURNISHEDOFF
  FURNISHEDSEMI
}
enum amountStatus {
  SHARED
  UNIQUE
  INCLUDED
}

model AddressImovel {
  id            Int     @id @default(autoincrement())
  cep           String  @db.VarChar(255)
  street        String  @db.VarChar(255)
  number        String  @db.VarChar(255)
  neighborhood  String  @db.VarChar(255)
  city          String  @db.VarChar(255)
  state         String  @db.VarChar(255)
  addressDetail String? @db.VarChar(255)
  imovelId      Int     @unique
  Imovel        Imovel  @relation(fields: [imovelId], references: [id])
}

model PhotosImmobile {
  id      Int    @id @default(autoincrement())
  imovel   Imovel  @relation(fields: [imovelId], references: [id],onUpdate: Cascade,onDelete: Cascade)
  name    String
  imovelId Int
  @@map("photosImmobile")
}